"use strict";

var _enzymeAdapterReact = require("enzyme-adapter-react-16");

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _SocialLoginButton = require("../SocialLoginButton");

var _SocialLoginButton2 = _interopRequireDefault(_SocialLoginButton);

var _enzyme = require("enzyme");

var _enzyme2 = _interopRequireDefault(_enzyme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_enzyme2.default.configure({ adapter: new _enzymeAdapterReact2.default() });

var render = function render(props) {
  return (0, _enzyme.shallow)(_react2.default.createElement(_SocialLoginButton2.default, props));
};

describe("SocialLoginButton", function () {
  it("Should render without crash", function () {
    render({});
  });

  it("Should listen to click events", function () {
    var eventMock = jest.fn();
    var button = render({ onClick: eventMock });

    expect(eventMock.mock.calls.length).toBe(0);
    button.simulate("click");
    expect(eventMock.mock.calls.length).toBe(1);
  });

  it("Should listen to mouse enter events", function () {
    var eventMock = jest.fn();
    var button = render({ onMouseEnter: eventMock });

    expect(eventMock.mock.calls.length).toBe(0);
    button.simulate("mouseenter");
    expect(eventMock.mock.calls.length).toBe(1);
  });

  it("Should listen to mouse leave events", function () {
    var eventMock = jest.fn();
    var button = render({ onMouseLeave: eventMock });

    expect(eventMock.mock.calls.length).toBe(0);
    button.simulate("mouseleave");
    expect(eventMock.mock.calls.length).toBe(1);
  });

  it("Should not crash when events fired without listeners", function () {
    var button = render({});
    button.simulate("mouseleave");
    button.simulate("mouseenter");
    button.simulate("click");
  });
});