{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Nav/Nav.js","components/Input/Input.js","components/Button/Button.js","utils/API.js","components/RecipeList/RecipeList.js","components/Thumbnail/Thumbnail.js","components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/RecipeList/RecipeListItem.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","target","id","rel","href","Nav","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","Input","props","Object","assign","Button","_ref","_ref$type","children","onClick","concat","join","API","getRecipes","query","console","log","axios","get","params","q","RecipeList","Thumbnail","role","style","backgroundImage","src","Col","size","split","map","Container","fluid","Row","RecipeListItem","Container_Container","Row_Row","Col_Col","components_Thumbnail_Thumbnail","thumbnail","title","ingredients","App","state","recipes","recipeSearch","handleInputChange","event","_event$target","name","value","_this","setState","defineProperty","handleFormSubmit","preventDefault","then","res","data","catch","err","components_Nav_Nav","components_Jumbotron_Jumbotron","components_Input_Input","this","onChange","placeholder","components_Button_Button","length","RecipeList_RecipeList","recipe","RecipeListItem_RecipeListItem","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec16b60a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Jumbotron.css\";\n\n\n\nconst Jumbotron = () => (\n  <div className=\"jumbotron jumbotron-fluid border-top border-bottom\">\n    <div className=\"container\">\n      <h1 className=\"display-4 logo\"><strong>React Eats</strong></h1>\n\n      <p className=\"lead\"><a target=\"_blank\" id=\"poweredby\" rel=\"noopener noreferrer\" href=\"http://www.recipepuppy.com/about/api/\"\n      >\n        <small>Powered by Recipe Puppy</small>\n      </a></p>\n\n    </div>\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button>\n  <a className=\"navbar-brand logo text-center\" href=\"/\">React Eats</a>\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item active\">\n        <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"#\">Features</a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"#\">Pricing</a>\n      </li>\n      <li className=\"nav-item dropdown\">\n        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n          Dropdown link\n        </a>\n        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n          <a className=\"dropdown-item\" href=\"#\">Action</a>\n          <a className=\"dropdown-item\" href=\"#\">Another action</a>\n          <a className=\"dropdown-item\" href=\"#\">Something else here</a>\n        </div>\n      </li>\n    </ul>\n  </div>\n  login | logout\n</nav>\n);\n\nexport default Nav;\n","import React from \"react\";\n\n// This component lets us use a bootstrap input element without worrying about class names\n// or manually wrapping the input with a form-group div\n// All of the props passed to this component are spread onto the input element\nconst Input = props => (\n  <div className=\"form-group\">\n    <input className=\"form-control input-lg\" type=\"text\" {...props} />\n  </div>\n);\n\nexport default Input;\n","import React from \"react\";\n\n// Destructuring the type, className, children and onClick props, applying them to the button element\nconst Button = ({ type = \"default\", className, children, onClick }) => (\n  <button\n    onClick={onClick}\n    className={[\"btn\", `btn-${type}`, className].join(\" \")}\n  >\n    {children}\n  </button>\n);\n\nexport default Button;\n","import axios from \"axios\";\n\n// The getRecipes method retrieves recipes from the server\n// It accepts a \"query\" or term to search the recipe api for\nexport default {\n  getRecipes: function(query) {\n    console.log(\"using utils\");\n    return axios.get(\"/api/recipes\", { params: { q: query } });\n  }\n};\n","import React from \"react\";\n\n// RecipeList renders a bootstrap list item\nexport const RecipeList = props => <ul className=\"list-group\">{props.children}</ul>;\n","import React from \"react\";\nimport \"./Thumbnail.css\";\n\n// The Thumbnail component renders a div that uses some CSS to render a background image\n// It will always keep square proportions at any size without the image warping\n// The \"role\" and \"aria label\" are there to identify the element's purpose as an image for accessibility purposes\nconst Thumbnail = props => (\n  <div\n    className=\"thumbnail\"\n    role=\"img\"\n    aria-label=\"Recipe Image\"\n    style={{\n      backgroundImage: `url(${props.src})`\n    }}\n  />\n);\n\nexport default Thumbnail;\n","import React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) => (\n  <div className={size.split(\" \").map(size => \"col-\" + size).join(\" \")}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => (\n  <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => (\n  <div className={`row${fluid ? \"-fluid\" : \"\"}`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\nimport Thumbnail from \"../Thumbnail\";\nimport { Container, Row, Col } from \"../Grid\";\n\n// RecipeListItem renders a bootstrap list item containing data from the recipe api call\nexport const RecipeListItem = props => (\n  <li className=\"list-group-item\">\n    <Container>\n      <Row>\n        <Col size=\"xs-4 sm-2\">\n          <Thumbnail src={props.thumbnail || \"/images/logo.png\"} />\n        </Col>\n        <Col size=\"xs-8 sm-9\">\n          <h3>{props.title}</h3>\n          <p>Ingredients: {props.ingredients}</p>\n          <a rel=\"noreferrer noopener\" target=\"_blank\" href={props.href}>Go to recipe!</a>\n        </Col>\n      </Row>\n    </Container>\n  </li>\n);\n","import React, { Component } from \"react\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Nav from \"./components/Nav\";\nimport Input from \"./components/Input\";\nimport Button from \"./components/Button\";\nimport API from \"./utils/API\";\nimport { RecipeList, RecipeListItem } from \"./components/RecipeList\";\nimport { Container, Row, Col } from \"./components/Grid\";\n\nclass App extends Component\n{\n  state = {\n    recipes: [],\n    recipeSearch: \"\"\n  };\n\n  handleInputChange = event => {\n    // Destructure the name and value properties off of event.target\n    // Update the appropriate state\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n      //name input = value of input\n      //[name]=recipeSearch\n      //value= \"chicken\"\n      //recipeSearch:\"chicken\"\n    });\n\n  };\n\n  handleFormSubmit = event => {\n    // When the form is submitted, prevent its default behavior, get recipes update the recipes state\n    //App.js=> API.js=> apiRoute.js=>API.js=>App.js (returns out the array of object for chicken search query in json format)\n    event.preventDefault();\n    console.log(\"requesting handleFormSubmit \"+this.state.recipeSearch);\n    API.getRecipes(this.state.recipeSearch)\n      .then(res => this.setState({ recipes: res.data }))\n      .catch(err => console.log(err));\n\n      console.log(this.state.recipes);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav />\n        <Jumbotron />\n        <Container>\n          <Row>\n            <Col size=\"md-12\">\n              <form>\n                <Container>\n                  <Row>\n                    <Col size=\"xs-9 sm-10\">\n                      <Input\n                        name=\"recipeSearch\"\n                        value={this.state.recipeSearch}\n                        onChange={this.handleInputChange}\n                        placeholder=\"Search For a Recipe\"\n                      />\n                    </Col>\n                    <Col size=\"xs-3 sm-2\">\n                      <Button\n                        onClick={this.handleFormSubmit}\n                        type=\"success\"\n                        className=\"input-lg\"\n                      >\n                        Search\n                      </Button>\n                    </Col>\n                  </Row>\n                </Container>\n              </form>\n            </Col>\n          </Row>\n          <Row>\n            <Col size=\"xs-12\">\n              {!this.state.recipes.length ? (\n                <h1 className=\"text-center\">No Recipes to Display</h1>\n              ) : (\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item list-group-item-light\"><strong>Results</strong></li>\n                <RecipeList>\n                  {this.state.recipes.map(recipe => {\n                    return (\n                      <RecipeListItem\n                        key={recipe.title}\n                        title={recipe.title}\n                        href={recipe.href}\n                        ingredients={recipe.ingredients}\n                        thumbnail={recipe.thumbnail}\n                      />\n                    );\n                  })}\n                </RecipeList>\n              </ul>\n              )}\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}